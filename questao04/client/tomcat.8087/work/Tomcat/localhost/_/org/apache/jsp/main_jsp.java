/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.16
 * Generated at: 2018-04-20 18:42:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" charset=\"utf-8\">\n");
      out.write("        <link rel=\"stylesheet\" type=\"text/css\" href=\"vendor/bootstrap/css/bootstrap.min.css\">\n");
      out.write("        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/util.css\">\n");
      out.write("        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\n");
      out.write("        <style>\n");
      out.write("            body {\n");
      out.write("                margin: 0 auto;\n");
      out.write("                width: 100%;\n");
      out.write("                padding: 0 20px;\n");
      out.write("                padding-top: 5%;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .container {\n");
      out.write("                border: 2px solid #dedede;\n");
      out.write("                background-color: #f1f1f1;\n");
      out.write("                border-radius: 5px;\n");
      out.write("                padding: 10px;\n");
      out.write("                margin: 10px 0;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .darker {\n");
      out.write("                border-color: #ccc;\n");
      out.write("                background-color: #ddd;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .container::after {\n");
      out.write("                content: \"\";\n");
      out.write("                clear: both;\n");
      out.write("                display: table;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .time-right {\n");
      out.write("                float: right;\n");
      out.write("                color: #aaa;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .time-left {\n");
      out.write("                float: left;\n");
      out.write("                color: #999;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            #messages {\n");
      out.write("                display: inline-block;\n");
      out.write("                height: 500px;\n");
      out.write("                max-height: 500px;\n");
      out.write("                width: 70%;\n");
      out.write("                border: 0.5px solid #d3d3d3;\n");
      out.write("                padding: 0px 10px 0px 10px;\n");
      out.write("                overflow: scroll;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            #nicknames {\n");
      out.write("                position: fixed;\n");
      out.write("                display: inline-block;\n");
      out.write("                width: 10%;\n");
      out.write("                margin-left: 1%;\n");
      out.write("                overflow: scroll;\n");
      out.write("                max-height: 500px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            #display {\n");
      out.write("                margin: 0 auto;\n");
      out.write("                width: 50%;\n");
      out.write("\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            #send {\n");
      out.write("                width: 50%;\n");
      out.write("                margin: 0 auto;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            #text {\n");
      out.write("\n");
      out.write("                display: inline-block;\n");
      out.write("                width: 70%\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <div id=\"display\">\n");
      out.write("            <div id=\"messages\">\n");
      out.write("                <h3 style=\"text-align: center;\">Chat Messages</h3>\n");
      out.write("                <div class=\"data_ms\">\n");
      out.write("                    <div class=\"container\" v-for=\"message in messages.array\">\n");
      out.write("                        <span class=\"time-left\" style=\"color: red\">{{message.userOwner}}</span><br>\n");
      out.write("                        <p>{{message.content}}</p>\n");
      out.write("                    </div>\n");
      out.write("                </div>  \n");
      out.write("            </div>\n");
      out.write("            <div id=\"nicknames\" class=\"data_us\">\n");
      out.write("                <ol class=\"list-group\">\n");
      out.write("                    <li class=\"list-group-item\" v-for=\"user in users.array\">{{user.nickname}}</li>\n");
      out.write("                </ol>\n");
      out.write("            </div>  \n");
      out.write("        </div>\n");
      out.write("        <div id=\"send\">\n");
      out.write("            <div class=\"form-group\" id=\"text\">\n");
      out.write("                <label for=\"comment\">Message:</label>\n");
      out.write("                <textarea class=\"form-control\" rows=\"3\" id=\"comment\" name=\"message\" form=\"postform\"></textarea>\n");
      out.write("            </div>\n");
      out.write("            <form method=\"POST\" action=\"messages\" id=\"postform\" >\n");
      out.write("                <input type=\"hidden\" name=\"nickname\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.nickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">\n");
      out.write("                <button class=\"login100-form-btn\" id=\"sender\" type=\"submit\">\n");
      out.write("                    Send\n");
      out.write("                </button>\n");
      out.write("            </form> \n");
      out.write("        </div>\n");
      out.write("        <script src=\"js/vue.js\"></script>\n");
      out.write("        <script src=\"https://cdn.jsdelivr.net/npm/vue-resource@1.5.0\"></script>\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("var vm_user = new Vue({\n");
      out.write("    el: '.data_us',\n");
      out.write("    data: {\n");
      out.write("        users: {'array': []}\n");
      out.write("    },\n");
      out.write("    methods: {\n");
      out.write("        loadUsers: function () {\n");
      out.write("            Vue.http.get('http://localhost:8080/chat-rs/chat/allUsers').then(res => {\n");
      out.write("                Vue.set(vm_user.users, 'array', res.body);\n");
      out.write("            }, (error) => {\n");
      out.write("                console.log(error);\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("    },\n");
      out.write("    mounted: function () {\n");
      out.write("        this.loadUsers();\n");
      out.write("        setInterval(function () {\n");
      out.write("            console.log(\"updating user list\");\n");
      out.write("            this.loadUsers();\n");
      out.write("        }.bind(this), 2000);\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("//\n");
      out.write("var vm_ms = new Vue({\n");
      out.write("    el: '.data_ms',\n");
      out.write("    data: {\n");
      out.write("        messages: {'array': []}\n");
      out.write("    },\n");
      out.write("    methods: {\n");
      out.write("        loadMessages: function () {\n");
      out.write("            Vue.http.get('http://localhost:8080/chat-rs/chat/allMessages').then(res => {\n");
      out.write("                Vue.set(vm_ms.messages, 'array', res.body);\n");
      out.write("            }, (error) => {\n");
      out.write("                console.log(error);\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("    },\n");
      out.write("    mounted: function () {\n");
      out.write("        this.loadMessages();\n");
      out.write("        setInterval(function () {\n");
      out.write("            console.log(\"updating messages list\");\n");
      out.write("            this.loadMessages();\n");
      out.write("        }.bind(this), 2000);\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
